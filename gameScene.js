var GameScene = Class.create(Scene, {
	initialize: function() {
		Scene.apply(this);

		// GameScene instance variable
		var GS = this;

		// TO-DO change Game class
		var game = Game.instance;

		// Set the inputs key needed
		game.keybind(32, 'space');
		game.keybind(16, 'shift');

		// Key listener for the (P)
		document.addEventListener('keyup', function(e) {
			// if P is pressed & the global value of game running is false
			// then the game was paused & need to be resumed
			if (e.keyCode == 80 && !gameIsRunning) {
				gameIsRunning = true;
				game.resume();
				console.info("GAME RESUMED");
			} else if (e.keyCode == 80 && gameIsRunning) {
				// If P is pressed & the game is Running then we need to pause it
				gameIsRunning = false;
				game.pause();
				console.info("GAME PAUSED");
			}
		});

		// Maze Class
		var maze = new Maze(20, 20);
		// Get the array generated by maze (ones & zeros)
		this.mazeArray = maze.getMazeArray();

		// Generate a 2D map objects for the map
		// this.mapObjects = create2dArray(mazeArray.length);
		this.mapObjects = this.generatingMapObjects(this.mazeArray);


		// Add the end point
		var endP = new EndPoint();
		endP.moveTo((i - 2) * 16, (j - 2) * 16);

		this.addChild(endP);

		// Add the hero
		var AryaStark = new Hero();
		AryaStark.moveTo(16, 16);

		this.addEventListener('enterframe', function() {
			var heroCoinHits = AryaStark.intersect(Coin);
			if (heroCoinHits.length) {
				// Remove the coin
				this.removeChild(heroCoinHits[0]);
				// Play Sound here
			}

			var heroAmmoHits = AryaStark.intersect(Ammo);
			if (heroAmmoHits.length) {
				// Remove the coin
				this.removeChild(heroAmmoHits[0]);
				// Play Sound here
			}


			// Bullet hit BombA
			var bulletBombAhits = Projectile.intersectStrict(BombA);
			if (bulletBombAhits.length) {
				// Get the axises of the Bomb to use it later
				var ax_x = bulletBombAhits[0][1].x,
					ax_y = bulletBombAhits[0][1].y;
				// Create a new Road block to replace it
				var road = new Road();
				// Move the road block to the position of the mud wall to replace it
				road.moveTo(ax_x, ax_y);
				// Reset the value of this block in the array to make it a free space to move in
				this.mapObjects[ax_x / 16][ax_y / 16] = road;
				this.mazeArray[ax_x / 16][ax_y / 16] = 0;
				// Remove the mud wall from scene
				this.removeChild(bulletBombAhits[0][1]);
				// Remove AryaStaro & added it again to be on top of the ground
				this.removeChild(AryaStark);
				// Add the road to the scene
				this.addChild(road);
				// Then re Add Area to be on top of the ground
				this.addChild(AryaStark);
				// Remove the bullet from the scene
				this.removeChild(bulletBombAhits[0][0]);
			}

			// Bullet Intersection with the mud wall
			var bulletMudWall = Projectile.intersectStrict(MudWall);
			if (bulletMudWall.length) {
				// Get the axises of the mud wall to use it later
				var axis_x = bulletMudWall[0][1].x,
					axis_y = bulletMudWall[0][1].y;
				// Create a new Road block to replace it
				var r = new Road();
				// Move the road block to the position of the mud wall to replace it
				r.moveTo(axis_x, axis_y);
				// Reset the value of this block in the array to make it a free space to move in
				this.mapObjects[axis_x / 16][axis_y / 16] = r;
				this.mazeArray[axis_x / 16][axis_y / 16] = 0;
				// Remove the mud wall from scene
				this.removeChild(bulletMudWall[0][1]);
				// Remove AryaStaro & added it again to be on top of the ground
				this.removeChild(AryaStark);
				// Add the road to the scene
				this.addChild(r);
				// Then re Add Area to be on top of the ground
				this.addChild(AryaStark);
				// Remove the bullet from the scene
				this.removeChild(bulletMudWall[0][0]);
			}

			// Bullet intersection with the wall make it disappear
			var bulletStoneWall = Projectile.intersectStrict(StoneWall);
			if (bulletStoneWall.length) {
				this.removeChild(bulletStoneWall[0][0]);
			}



			if (game.input.space) {
				game.input.space = false;
				this.addChild(this.fire(AryaStark));
			}

			if (AryaStark.isMoving && AryaStark.isAlive) {

				AryaStark.moveBy(AryaStark.vx, AryaStark.vy);

				AryaStark.frame = AryaStark.animationArray[(AryaStark.frame + 1) % 3];

				if ((AryaStark.vx && (AryaStark.x - 16) % 16 === 0) || (AryaStark.vy && (AryaStark.y - 16) % 16 === 0)) {
					AryaStark.isMoving = false;
				}

			} else if (AryaStark.isAlive) {
				AryaStark.vx = AryaStark.vy = 0;

				var currentDirection = AryaStark.direction;

				if (game.input.left) {
					AryaStark.turnLeft();
					// If user is hitting shift key then don't move just turn around !
					AryaStark.vx = game.input.shift ? 0 : -4;
				} else if (game.input.right) {
					AryaStark.turnRight();
					// If user is hitting shift key then don't move just turn around !
					AryaStark.vx = game.input.shift ? 0 : 4;
				} else if (game.input.up) {
					AryaStark.turnUp();
					// If user is hitting shift key then don't move just turn around !
					AryaStark.vy = game.input.shift ? 0 : -4;
				} else if (game.input.down) {
					AryaStark.turnDown();
					// If user is hitting shift key then don't move just turn around !
					AryaStark.vy = game.input.shift ? 0 : 4;
				}

				var newDirection = AryaStark.direction;

				if ((AryaStark.vx || AryaStark.vy) && newDirection == currentDirection) {
					var x = AryaStark.x + (AryaStark.vx ? AryaStark.vx / Math.abs(AryaStark.vx) * 16 : 0) + 12;
					var y = AryaStark.y + (AryaStark.vy ? AryaStark.vy / Math.abs(AryaStark.vy) * 16 : 0) + 12;
					if (0 <= x && x < 41 * 16 && 0 <= y && y < 41 * 16 && !this.isNotAllowed(x, y)) {
						AryaStark.isMoving = true;
						arguments.callee.call(this);
					}
				}

			}
		});

		this.addChild(AryaStark);


		AryaStark.addEventListener('enterframe', function() {
			// Handle if Stark hit a bomb A or B
			hitsA = this.intersect(BombA);
			hitsB = this.intersect(BombB);
			if (hitsA.length) GS.AryaStarkHitBomb(this, GS, 'A', hitsA);
			if (hitsB.length) GS.AryaStarkHitBomb(this, GS, 'B', hitsB);
		});
	},
	getMapObjects: function() {
		return this.mapObjects;
	},
	generatingMapObjects: function(mazeArray) {

		// Create an empty array of maps objects
		var mapObjects = create2dArray(mazeArray.length);

		for (i = 0; i < mazeArray.length; i++) {
			for (j = 0; j < mazeArray.length; j++) {
				if (mazeArray[i][j] === 1 && !isBoundaries(i, j, mazeArray.length)) {
					// If this block is a restricted block & Not a boundary 
					mapObjects[i][j] = Math.random() > 0.9 ? new MudWall() : new StoneWall();
				} else if (mazeArray[i][j] === 1) {
					// If this block is restricted & A boundary
					mapObjects[i][j] = new BoundaryWall();
				} else {
					// If a normal road
					mapObjects[i][j] = new Road();
				}

				// SET THE LOCATION OF THE BLOCK IN SPIRIETS
				mapObjects[i][j].moveTo(i * 16, j * 16);

				this.addChild(mapObjects[i][j]);
			}
		}

		// Adding BombA
		var b;
		b = new BombA();
		b.moveTo(3 * 16, 3 * 16);
		this.addChild(b);


		return mapObjects;
	},
	isNotAllowed: function(x, y) {
		return this.mazeArray[parseInt(x / 16, 10)][parseInt(y / 16, 10)];
	},
	AryaStarkHitBomb: function(AryaStark, GS, bombType, hits) {

		if (hits.length) {

			// If the bomb type is B , we need to hold it some time before the explosion
			if (bombType === 'B') {
				// setTimeout(GS.BombExplode(hits, GS), BombB.waitTime);
				setTimeout(GS.BombExplode, 500, hits, GS, 'B', AryaStark);
			} else {
				GS.BombExplode(hits, GS, 'A', AryaStark);
			}

		}
	},
	BombExplode: function(hits, GS, bombType, AryaStark) {
		var explosion = new Animation();
		explosion.moveTo(hits[0].x, hits[0].y);

		var explosionHit = false;

		if (bombType === 'B') {
			explosionHit = AryaStark.intersect(hits[0]);
			// if (explosionHit) Game.instance.stop();
			AryaStark.isAlive = !explosionHit;
		} else if (bombType === 'A') {
			explosionHit = true;
			// We don't stop the game because we want to wait until the explosion animation finish
			AryaStark.isAlive = false;
			// Game.instance.stop();		}

		GS.addChild(explosion);
		GS.removeChild(hits[0]);

		setTimeout(function() {
			GS.removeChild(explosion);

			if (explosionHit) {
				//////////////////////////
				// YOU DIED OOOOPS ! ////
				//////////////////////////
				// Game.instance.stop();
			}
		}, 1000, explosion, GS);
	},
	fire: function(AryaStark) {
		var bullet = new Projectile();
		bullet.moveTo(AryaStark.x - 8, AryaStark.y - 8);

		switch (AryaStark.direction) {
			case 0:
				bullet.tl.moveBy(0, 41 * 16, 25);
				break;
			case 1:
				bullet.tl.moveBy(0, -41 * 16, 25);
				break;
			case 2:
				bullet.tl.moveBy(-41 * 16, 0, 25);
				break;
			case 3:
				bullet.tl.moveBy(41 * 16, 0, 25);
				break;
		}
		return bullet;
	}
});


// Static Functions
isBoundaries = function(i, j, length) {
	// Check if it's a boundary in the map
	return (i === 0 || j === 0 || j === length - 1 || i === length - 1);
};

create2dArray = function(height, width, value) {
	if (!value) value = 0;
	if (height && !width) width = height;
	var arr = [];
	for (i = 0; i < height; i++) arr[i] = [];
	for (i = 0; i < height; i++)
		for (j = 0; j < width; j++)
			arr[i][j] = value;
	return arr;
};

var sleep = function(milliseconds) {
	var start = new Date().getTime();
	for (var i = 0; i < 1e7; i++) {
		if ((new Date().getTime() - start) > milliseconds) {
			break;
		}
	}
};

toEndScene=function(status){
	/*
		end the game status == 0 lose , status ==1 win
	*/
	Game.instance.replaceScene(new EndScene(status));
};
